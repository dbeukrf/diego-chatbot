# Personal Portfolio Chatbot - Brainstorming Session Results

**Session Date:** 2025-10-21  
**Facilitator:** Business Analyst Mary  
**Participant:** User  

---

## Executive Summary

### Topic
Building a personal portfolio chatbot powered by RAG and open-source LLM (Llama) that answers questions about the developer using their personal documents.

### Session Goals
Focused ideation on creating a simple, functional chatbot that serves as an impressive portfolio piece while maintaining authenticity and personality.

### Techniques Used
1. SCAMPER Method (Substitute, Combine, Adapt, Modify, Put to other uses, Eliminate, Reverse)
2. First Principles Thinking (Technical fundamentals breakdown)
3. Categorization & Prioritization

### Total Ideas Generated
30+ distinct features and implementation approaches

### Key Themes Identified
- **Terminal Aesthetic**: Windows Terminal-inspired UI with minimal colors and authentic CLI feel
- **Personality-Driven**: Witty, helpful, enthusiastic bot with structured responses (bullets + storytelling)
- **Technical Simplicity**: Streamlit + Llama + FAISS for MVP with clear upgrade path
- **Authentic Representation**: Balance achievements with challenges/lessons learned
- **Engagement Focus**: Proactive topic introduction and assumption challenging

---

## Technique Sessions

### 1. SCAMPER Method - 45 minutes

**Description:** Systematic creative thinking through seven lenses to explore different aspects of the chatbot design.

#### Ideas Generated:

**SUBSTITUTE:**
1. Opening with context explanation (who you are + chatbot purpose)
2. Terminal-style visual interface instead of standard chat UI
3. Inject humor and personal quirks into responses

**COMBINE:**
4. Embed links to projects, resume, social profiles in responses
5. Multiple PDF data sources (resume, project docs, personal notes)
6. Text responses with potential for code snippets, demos, images (future)

**ADAPT:**
7. Minimal color scheme (terminal-inspired)
8. Special commands users can type
9. Hidden easter eggs for exploration
10. Windows Terminal aesthetic as visual reference
11. Distinct chatbot personality (witty, helpful, enthusiastic)

**MODIFY:**
12. Response format: Concise bullet points (TL;DR) + conversational storytelling
13. Typing animations + cursor blink
14. ASCII art headers
15. Simulated "thinking" delay for authenticity
16. Creative 404-style error messages

**PUT TO OTHER USES:**
17. Email chat summary feature (bonus/optional)
18. Project recommendation engine potential
19. Fun stats tracking capability (future consideration)

**ELIMINATE:**
20. NO user accounts (keep it simple)
21. NO chat history persistence (stateless sessions)
22. Multi-language support = nice-to-have (not V1)
23. Filter/block inappropriate questions

**REVERSE/REARRANGE:**
24. Bot can proactively introduce topics for exploration
25. Challenge incorrect assumptions intelligently
26. Balance achievements with challenges/lessons learned (authenticity)
27. Chat-first approach to portfolio (unconventional structure)

#### Insights Discovered:
- Terminal aesthetic provides both technical credibility and unique user experience
- Personality should reflect authentic traits rather than generic "professional" tone
- Simplicity is a feature, not a limitation - eliminate complexity that doesn't serve core purpose
- Reversing typical portfolio structure (interactive first) creates memorable engagement

#### Notable Connections:
- Terminal UI + typing animations + ASCII art = cohesive retro-tech aesthetic
- Witty personality + 404 errors + easter eggs = consistent playful tone
- PDF RAG + embedded links + proactive topics = comprehensive information delivery

---

### 2. First Principles Thinking - 20 minutes

**Description:** Breaking down the chatbot into fundamental technical components to identify the simplest viable implementation.

#### Core Technical Architecture:

**User Interface Layer:**
- Streamlit or Gradio for rapid MVP development
- Terminal simulation: monospace font, dark background, scrollable container
- Color coding for user vs bot messages
- "Enter to send" behavior (native to Streamlit)
- Auto-scroll functionality

**LLM Integration Layer:**
- Open-source Llama model
- Simple API integration
- Personality defined in system prompt/template

**RAG/Document Layer:**
- Load PDFs → Extract text
- Split text → chunks (~1k characters)
- Embed chunks → vector embeddings
- Store in FAISS (lightweight, local vector DB)
- Query → fetch relevant chunks for LLM context

**Response Generation Layer:**
- Personality and formatting = instructions in the prompt
- No advanced prompt engineering needed for MVP
- Template-based personality definition

**Hosting/Deployment Layer:**
- Streamlit Cloud (simplest deployment)
- Local development first
- Minimal infrastructure overhead

#### Insights Discovered:
- Streamlit provides fastest path to terminal-style web interface
- FAISS is ideal for local, lightweight vector search without cloud dependencies
- System prompts can handle personality without complex pipelines
- Each layer can be implemented independently and tested in isolation

---

## Idea Categorization

### Immediate Opportunities
*Ideas ready to implement now - CORE MVP (V1)*

1. **Terminal-style Web Interface (Streamlit)**
   - Description: Streamlit-based chat UI with terminal aesthetics
   - Why immediate: Foundation for entire project, quick to prototype
   - Resources needed: Streamlit, basic Python/CSS knowledge

2. **Llama LLM Integration**
   - Description: Connect to Llama model for response generation
   - Why immediate: Core functionality requirement
   - Resources needed: Llama model access, API/local setup

3. **Basic RAG Pipeline with FAISS**
   - Description: PDF ingestion → chunking → embedding → vector search
   - Why immediate: Enables personalized responses from your documents
   - Resources needed: FAISS library, embedding model, PDF processing tools

4. **Personality System Prompt**
   - Description: Witty, helpful, enthusiastic personality defined in template
   - Why immediate: Differentiates from generic chatbots
   - Resources needed: Prompt engineering, your personality traits documented

5. **Structured Response Format**
   - Description: Bullet points (TL;DR) + conversational storytelling below
   - Why immediate: Improves readability and user experience
   - Resources needed: Prompt template design

6. **Embedded Links in Responses**
   - Description: Projects, resume, social profiles linked contextually
   - Why immediate: Drives portfolio goals directly
   - Resources needed: Your URLs, link injection logic

7. **Inappropriate Question Filtering**
   - Description: Basic content moderation
   - Why immediate: Protect brand and user experience
   - Resources needed: Simple keyword filtering or LLM-based classification

### POLISH FEATURES (Should Have - V1)

8. **Typing Animation + Cursor Blink**
   - Description: Simulate authentic terminal typing experience
   - Development needed: CSS animations or JavaScript
   - Timeline estimate: 2-4 hours

9. **ASCII Art Headers**
   - Description: Terminal-style visual headers for sections
   - Development needed: ASCII art generation or pre-made designs
   - Timeline estimate: 1-2 hours

10. **Simulated "Thinking" Delay**
    - Description: Brief pause before responses for authenticity
    - Development needed: Sleep/delay in response pipeline
    - Timeline estimate: 30 minutes

11. **Creative 404-Style Error Messages**
    - Description: Personality-driven error handling
    - Development needed: Error message templates
    - Timeline estimate: 1 hour

12. **Windows Terminal Color Scheme**
    - Description: Specific color palette and styling
    - Development needed: CSS customization in Streamlit
    - Timeline estimate: 2-3 hours

### Future Innovations
*Ideas requiring development/research - ENGAGEMENT FEATURES (V1 or V2)*

13. **Proactive Topic Introduction**
    - Description: Bot suggests conversation topics
    - Development needed: Topic detection and suggestion logic
    - Timeline estimate: 4-8 hours

14. **Challenge Incorrect Assumptions**
    - Description: Bot intelligently corrects misconceptions
    - Development needed: Assumption detection in RAG context
    - Timeline estimate: 6-10 hours

15. **Special Commands**
    - Description: Terminal-like commands (/help, /projects, etc.)
    - Development needed: Command parser and handler
    - Timeline estimate: 4-6 hours

16. **Hidden Easter Eggs**
    - Description: Secret commands or responses for exploration
    - Development needed: Easter egg content creation and triggers
    - Timeline estimate: 2-4 hours

### Moonshots
*Ambitious, transformative concepts - BONUS FEATURES (V2+)*

17. **Email Chat Summary**
    - Description: Send conversation transcript to visitor's email
    - Transformative potential: Networking tool, professional follow-up mechanism
    - Challenges to overcome: Email service integration, privacy/spam concerns, UX flow

18. **Multi-Language Support**
    - Description: Respond in visitor's preferred language
    - Transformative potential: Global accessibility, international portfolio reach
    - Challenges to overcome: LLM multilingual capability, translation accuracy, cultural context

19. **Advanced Personality Evolution**
    - Description: Adaptive responses based on conversation context
    - Transformative potential: Deeply personalized interactions
    - Challenges to overcome: State management, context window limitations, consistency

### Insights & Learnings
*Key realizations from the session*

- **Terminal aesthetics aren't just visual**: They set expectations for interaction style (command-based, efficient, technical credibility)
- **Personality in LLM is prompt engineering**: No need to overcomplicate - clear instructions in system prompt achieve 80% of the goal
- **Simplicity is a strategic advantage**: Eliminating features (no accounts, no persistence) reduces complexity while improving user experience
- **Authenticity beats polish**: Showing challenges/lessons learned creates more memorable impression than pure achievement list
- **RAG is simpler than expected**: FAISS + basic chunking provides powerful personalization without cloud infrastructure

---

## Action Planning

### Top 3 Priority Ideas

#### #1 Priority: Set up Basic Streamlit Terminal UI with Llama Integration

**Rationale:**  
Foundation for entire project. Without the UI and LLM connection, nothing else matters. Streamlit provides fastest path to working prototype.

**Next Steps:**
1. Install Streamlit and test basic chat interface
2. Set up Llama model (local or API)
3. Create simple prompt-response loop
4. Apply terminal styling (dark theme, monospace font)
5. Test end-to-end: user input → LLM → formatted output

**Resources Needed:**
- Streamlit documentation
- Llama model setup guide
- Python environment with required libraries
- Basic CSS for styling

**Timeline:** 1-2 days for working prototype

---

#### #2 Priority: Implement RAG Pipeline with FAISS on Your PDFs

**Rationale:**  
This is what makes the chatbot *about you* rather than a generic LLM. Personal document grounding is the core value proposition.

**Next Steps:**
1. Collect and organize personal PDFs (resume, project descriptions, notes)
2. Implement PDF text extraction
3. Create chunking strategy (~1k characters with overlap)
4. Generate embeddings for chunks
5. Set up FAISS vector database
6. Implement similarity search for query → relevant chunks
7. Integrate retrieved context into LLM prompts

**Resources Needed:**
- PDF processing library (PyPDF2 or pdfplumber)
- Embedding model (sentence-transformers)
- FAISS library
- Your personal documents

**Timeline:** 2-3 days for functional RAG system

---

#### #3 Priority: Craft the Personality System Prompt

**Rationale:**  
Personality is the differentiator. A well-crafted system prompt transforms generic responses into memorable, authentic interactions.

**Next Steps:**
1. Document your key personality traits (witty, helpful, enthusiastic)
2. Write examples of how you'd respond to common questions
3. Define response structure rules (bullets + storytelling)
4. Create guidelines for tone and style
5. Draft system prompt template
6. Test with various queries and refine
7. Add instructions for link embedding and error handling

**Resources Needed:**
- Self-reflection on authentic voice
- Examples of writing that represents your style
- Prompt engineering best practices
- Test question bank

**Timeline:** 1 day for initial prompt, ongoing refinement

---

## Reflection & Follow-up

### What Worked Well
- SCAMPER method systematically explored all dimensions of the project
- First principles thinking grounded creative ideas in technical reality
- Starting with constraints (simple, basic) kept scope manageable
- Terminal aesthetic emerged as unifying design principle

### Areas for Further Exploration
- **User testing**: How do visitors actually interact with portfolio chatbots? What questions do they ask?
- **Content strategy**: What specific documents/information should be in the RAG database for maximum impact?
- **Performance optimization**: How to make responses feel fast while maintaining "thinking" authenticity?
- **Analytics**: What metrics would validate this is working as a portfolio tool?

### Recommended Follow-up Techniques
- **User Journey Mapping**: Map typical recruiter/visitor journey through the chatbot
- **Content Audit**: Review all personal documents and identify gaps
- **Competitive Analysis**: Analyze other developer portfolio chatbots for differentiation opportunities

### Questions That Emerged
- What's the optimal chunk size for your specific documents?
- Should the bot have different personalities for different question types?
- How to handle questions outside your document scope gracefully?
- What's the right balance between automation and manual curation of responses?

### Next Session Planning
- **Suggested topics**: Technical implementation deep-dive, content strategy, testing plan
- **Recommended timeframe**: After initial prototype is built (2-3 weeks)
- **Preparation needed**: Working prototype, initial user feedback, documented challenges

---

*Session facilitated using the BMAD-METHOD™ brainstorming framework*